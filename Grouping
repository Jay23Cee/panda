#Any groupby operation involves one of the following operations on the original object. They are âˆ’

#Splitting the Object

#Applying a function

#Combining the results

import pandas as pd

ipl_data = {'Team': ['Riders', 'Riders', 'Devils', 'Devils', 'Kings',
         'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],
         'Rank': [1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],
         'Year': [2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],
         'Points':[876,789,863,673,741,812,756,788,694,701,804,690]}
df = pd.DataFrame(ipl_data)

print( df)


print (df.groupby('Team'))


import pandas as pd
ipl_data = {'Team': ['Riders', 'Riders', 'Devils', 'Devils', 'Kings',
         'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],
         'Rank': [1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],
         'Year': [2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],           'Points':[876,789,863,673,741,812,756,788,694,701,804,690]}
df = pd.DataFrame(ipl_data)
print(df.groupby('Team').groups)
print('/n')
print((['Team','Year']).groups)


### Iterating through groups
#with the group by object in hands, we can iterate through the object similar to itertools.ob

grouped = df.groupby('Year')
for name, group in grouped:
         print(name)
         print(group)

#Select group
#using the get_group() method, we can select a single group

grouped = df.groupby('Year')
print(grouped.get_group(2014)) 


#Aggregations
#an aggragated function returns a single aggregated value for each group. 
#ONCE THE GROUP BY object is created, several aggregatino operations can be performed on the grouped data.
#an obvious one is aggregation via the aggregate or equivalent agg method--

print(grouped['Points'].agg(np.mean))

#another way to see the size of each group is by applying the size function()
print(grouped.agg(np.size))

#applying multiple aggregations function at once
grouped = df.groupby('Team')
print grouped[Points'].agg([np.sum, np.mean, np.std])

#Transformation
#'' on a group or a column returns an object that is indexed the same size of that is being grouped. Thus, the transform should return za result that is the same size as that of a group chunk
score = lambda x : (x-x.mean()) / x.std()*10
print grouped.transform(score)

#filtration filters the data on a defined criteria and returns the subset of data. The filter() function is used to filter the data

print (df.groupby('Team').filter(labmda x: len(x) >=3))
#we are asking to return the teams which have participated three or more times in IPL
