#Function Application
import pandas as pd
import numpy as np


#Adder function
#The adder function adds two numeric values as paramters and returns the sum.

def adder(ele1, ele2):
  return ele1+ ele2

df = pd.DataFrame(np.random.randn(5,3), columns = ['col1', 'col2', 'col3'])

df.pipe(adder,2)
#apply() method which like the descriptive statistic methods, takes an optional axis argument, by default the operations performs column wise, taking each column as an array-like
print(df.apply(np.mean))


#example 2
df.apply(np.mean, axis=1)
print(df.apply(np.mean))

#example 3
df.apply(lambda x:  x.max() = xmin())
print( df.apply(np.mean))



#Element wise function application
#now all function can be vectorized ( neither the numpy array which return another array nor any value, the methods applymap() on dataframe and analogouslymap() on Series accept any python function taking a single value and returning a single value)

## my custom function
df['col1'].map(lambda x : x*100)
print(df.apply(np.mean))
